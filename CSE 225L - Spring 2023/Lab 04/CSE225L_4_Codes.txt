// declaration file
#ifndef UNSORTEDTYPE_H_INCLUDED
#define UNSORTEDTYPE_H_INCLUDED

#include <iostream>
using namespace std;

const int MAX_ITEMS = 5;

template <class ItemType>
class UnsortedType {
public :
    UnsortedType();
    void MakeEmpty();
    bool IsFull();
    int LengthIs();
    void InsertItem(ItemType);
    void DeleteItem(ItemType);
    void RetrieveItem(ItemType&, bool&);
    void ResetList();
    void GetNextItem(ItemType&);

private:
    int length;
    ItemType info[MAX_ITEMS];
    int currentPos;
};

#endif // UNSORTEDTYPE_H_INCLUDED

// definition file
#include "UnsortedType.h"

template <class ItemType>
UnsortedType<ItemType>::UnsortedType() {
    length = 0;
    currentPos = -1;
}
template <class ItemType>
void UnsortedType<ItemType>::MakeEmpty() {
    length = 0;
}
template <class ItemType>
bool UnsortedType<ItemType>::IsFull() {
    return (length == MAX_ITEMS);
}
template <class ItemType>
int UnsortedType<ItemType>::LengthIs() {
    return length;
}
template <class ItemType>
void UnsortedType<ItemType>::ResetList() {
    currentPos = -1;
}
template <class ItemType>
void UnsortedType<ItemType>::GetNextItem(ItemType& item) {
    currentPos++;
    item = info [currentPos] ;
}
template <class ItemType>
void UnsortedType<ItemType>::RetrieveItem(ItemType& item, bool &found) {
    int location = 0;
    bool moreToSearch = (location < length);
    found = false;
    while (moreToSearch && !found) {
        if(item == info[location]) {
            found = true;
            item = info[location];
        } else {
            location++;
            moreToSearch = (location < length);
        }
    }
}
template <class ItemType>
void UnsortedType<ItemType>::InsertItem(ItemType item) {
    info[length] = item;
    length++;
}
template <class ItemType>
void UnsortedType<ItemType>::DeleteItem(ItemType item) {
    int location = 0;
    while (item != info[location])
        location++;
    info[location] = info[length - 1];
    length--;
}

// driver file
#include "UnsortedType.cpp"

int main() {
    cout << "Hello world!" << endl;

    // create a list
    UnsortedType<int> ul;

    // insert items
    int tx;
    for(int i=0; i<4; i++) {
        cin >> tx;
        ul.InsertItem(tx);
    }

    // print the list
    ul.ResetList();
    int ty;
    for(int i=0; i<ul.LengthIs(); i++) {
        ul.GetNextItem(ty);
        cout << ty << " ";
    }
    cout << endl;

    // print length of the list
    cout << ul.LengthIs() << endl;

    // retrieve an item
    int tz;
    bool isFound;

    //tz = 4;     // without user input
    cin >> tz;  // with user input
    ul.RetrieveItem(tz, isFound);
    if(isFound) {
        cout << "item is found" << endl;
    } else {
        cout << "item is not found" << endl;
    }

    // delete an item
    int td;
    //td = 5;     // without user input
    cin >> td;  // with user input
    ul.DeleteItem(td);

    return 0;
}

